type Event @model @auth(rules: [
  { allow: owner, identityClaim: "username" },
  { allow: owner, ownerField: "guestOwners", operations: [read] },
  { allow: private, operations: [read] }
]) {
  id:          ID!
  name:        String!
  description: String
  location:    String
  startTime:   AWSDateTime!
  endTime:     AWSDateTime!
  liquorbotId: Int!
  inviteCode:  String! @index(name: "byCode", queryField: "eventsByCode")
  drinkIDs:    [Int]
  owner:       String!
  guestOwners: [String]
  guests:      [GuestEvent] @hasMany(indexName: "byEvent", fields: ["id"])
}

type GuestEvent
  @model
  @auth(rules:[{ allow: owner }]) {
  id:      ID! @primaryKey
  eventID: ID!   @index(name: "byEvent", queryField: "guestEventsByEvent")
  event:   Event @belongsTo(fields: ["eventID"])
}

# ---------- NEW custom mutation ----------
type Mutation {
  joinEvent(inviteCode: String!): Event
    @function(name: "joinEventFunction-${env}")
    @auth(rules: [{ allow: private }])

  leaveEvent(eventId: ID!): Event
    @function(name: "leaveEventFunction-${env}")
    @auth(rules: [{ allow: private }])
}

type PouredDrink @model @auth(rules: [{allow: public}, {allow: owner}]) {
  id: ID!
  userID: ID!
  drinkID: Int!
  drinkName: String
  volume: Float
  timestamp: AWSDateTime!
}

type LikedDrink @model @auth(rules: [{allow: public}, {allow: owner}]) {
  id: ID!
  userID: ID
  drinkID: Int
  createdAt: AWSDateTime
}

type RecipeIngredient {
  ingredientID: ID
  amount: Float
  priority: Int
}

type CustomRecipe @model @auth(rules: [{allow: public}, {allow: owner}]) {
  id: ID!
  name: String!
  description: String
  ingredients: [RecipeIngredient!]
  createdAt: AWSDateTime
  image: String
}

type UserProfile @model @auth(rules: [{allow: public}, {allow: owner}]) {
  id: ID!
  username: String
  bio: String
  role: String
  profilePicture: String
}
 