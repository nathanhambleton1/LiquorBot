### amplify/backend/api/LiquorBot/schema.graphql
type Event
  @model
  @auth(rules: [
    # 1 Host – full CRUD
    { allow: owner },

    # 2 Guests that already appear in guestOwners – read‑only
    { allow: owner, ownerField: "guestOwners", operations: [read] },

    # 3 Any signed‑in user may read a single record *by code* so
    #   they can validate/preview an invite.  They still cannot
    #   LIST all events because we will expose only a **custom**
    #   resolver for this path (see below).
    { allow: private, operations: [read] }
  ])
{
  id:          ID!
  name:        String!
  description: String
  location:    String
  startTime:   AWSDateTime!
  endTime:     AWSDateTime!
  liquorbotId: Int!
  inviteCode:  String!
    @index(name: "byCode", queryField: "eventsByCode")

  drinkIDs:    [Int]
  guestOwners: [String]          # auto‑managed – never touch on the client
  guests:      [GuestEvent]      @hasMany(indexName: "byEvent", fields: ["id"])
}

type GuestEvent
  @model
  @auth(rules:[{ allow: owner }]) {
  id:      ID! @primaryKey
  eventID: ID!   @index(name: "byEvent", queryField: "guestEventsByEvent")
  event:   Event @belongsTo(fields: ["eventID"])
}

# ---------- NEW custom mutation ----------
type Mutation {
  joinEvent(inviteCode: String!): Event
    @function(name: "joinEventFunction-${env}")        # Lambda (see below)
    @auth(rules:[{ allow: private }])          # any signed‑in user
}

type PouredDrink @model @auth(rules: [{allow: public}, {allow: owner}]) {
  id: ID!
  userID: ID!
  drinkID: Int!
  drinkName: String
  volume: Float
  timestamp: AWSDateTime!
}

type LikedDrink @model @auth(rules: [{allow: public}, {allow: owner}]) {
  id: ID!
  userID: ID
  drinkID: Int
  createdAt: AWSDateTime
}

type RecipeIngredient {
  ingredientID: ID
  amount: Float
  priority: Int
}

type CustomRecipe @model @auth(rules: [{allow: public}, {allow: owner}]) {
  id: ID!
  name: String!
  description: String
  ingredients: [RecipeIngredient!]
  createdAt: AWSDateTime
  image: String
}

type UserProfile @model @auth(rules: [{allow: public}, {allow: owner}]) {
  id: ID!
  username: String
  bio: String
  role: String
  profilePicture: String
}
 