type GuestEvent
  @model
  @auth(rules: [{ allow: owner }]) {
  id: ID! @primaryKey
  eventID: ID! @index(name: "byEvent", queryField: "guestEventsByEvent")
}


type Event @model @auth(rules: [{allow: public}, {allow: owner}, {allow: groups, groups: ["IoTUsers"], operations: [read, create, update, delete]}]) {
  id: ID!
  name: String!
  description: String
  location: String
  startTime: AWSDateTime!
  endTime: AWSDateTime!
  liquorbotId: Int!
  inviteCode: String!
  drinkIDs: [Int!]
}

type PouredDrink @model @auth(rules: [{allow: public}, {allow: owner}]) {
  id: ID!
  userID: ID!
  drinkID: Int!
  drinkName: String
  volume: Float
  timestamp: AWSDateTime!
}

type LikedDrink @model @auth(rules: [{allow: public}, {allow: owner}]) {
  id: ID!
  userID: ID
  drinkID: Int
  createdAt: AWSDateTime
}

type RecipeIngredient {
  ingredientID: ID
  amount: Float
  priority: Int
}

type CustomRecipe @model @auth(rules: [{allow: public}, {allow: owner}]) {
  id: ID!
  name: String!
  description: String
  ingredients: [RecipeIngredient!]
  createdAt: AWSDateTime
  image: String
}

type UserProfile @model @auth(rules: [{allow: public}, {allow: owner}]) {
  id: ID!
  username: String
  bio: String
  role: String
  profilePicture: String
}
 