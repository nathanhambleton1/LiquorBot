type User {
  id: ID!
  username: String
  email: String
  favorites(filter: ModelUserFavoriteFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelUserFavoriteConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String
}

type UserFavorite {
  id: ID!
  userID: ID!
  drinkID: ID!
  user: User
  drink: Drink
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String
}

type Ingredient @aws_api_key @aws_cognito_user_pools {
  id: ID!
  name: String!
  drinkIngredients(filter: ModelDrinkIngredientFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelDrinkIngredientConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String
}

type Drink @aws_api_key @aws_cognito_user_pools {
  id: ID!
  name: String!
  category: String
  description: String
  garnish: String
  image: String
  ingredients(filter: ModelDrinkIngredientFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelDrinkIngredientConnection
  favorites(filter: ModelUserFavoriteFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelUserFavoriteConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String
}

type DrinkIngredient @aws_api_key @aws_cognito_user_pools {
  id: ID!
  amount: Float
  unit: String
  drinkID: ID!
  ingredientID: ID!
  ingredient: Ingredient
  drink: Drink
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelUserConnection {
  items: [User]!
  nextToken: String
}

input ModelUserFilterInput {
  id: ModelIDInput
  username: ModelStringInput
  email: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
  owner: ModelStringInput
}

type Query {
  getUser(id: ID!): User
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
  getUserFavorite(id: ID!): UserFavorite
  listUserFavorites(filter: ModelUserFavoriteFilterInput, limit: Int, nextToken: String): ModelUserFavoriteConnection
  userFavoritesByUserID(userID: ID!, sortDirection: ModelSortDirection, filter: ModelUserFavoriteFilterInput, limit: Int, nextToken: String): ModelUserFavoriteConnection
  userFavoritesByDrinkID(drinkID: ID!, sortDirection: ModelSortDirection, filter: ModelUserFavoriteFilterInput, limit: Int, nextToken: String): ModelUserFavoriteConnection
  getIngredient(id: ID!): Ingredient @aws_api_key @aws_cognito_user_pools
  listIngredients(filter: ModelIngredientFilterInput, limit: Int, nextToken: String): ModelIngredientConnection @aws_api_key @aws_cognito_user_pools
  getDrink(id: ID!): Drink @aws_api_key @aws_cognito_user_pools
  listDrinks(filter: ModelDrinkFilterInput, limit: Int, nextToken: String): ModelDrinkConnection @aws_api_key @aws_cognito_user_pools
  getDrinkIngredient(id: ID!): DrinkIngredient @aws_api_key @aws_cognito_user_pools
  listDrinkIngredients(filter: ModelDrinkIngredientFilterInput, limit: Int, nextToken: String): ModelDrinkIngredientConnection @aws_api_key @aws_cognito_user_pools
  drinkIngredientsByDrinkID(drinkID: ID!, sortDirection: ModelSortDirection, filter: ModelDrinkIngredientFilterInput, limit: Int, nextToken: String): ModelDrinkIngredientConnection @aws_api_key @aws_cognito_user_pools
  drinkIngredientsByIngredientID(ingredientID: ID!, sortDirection: ModelSortDirection, filter: ModelDrinkIngredientFilterInput, limit: Int, nextToken: String): ModelDrinkIngredientConnection @aws_api_key @aws_cognito_user_pools
}

input ModelUserConditionInput {
  username: ModelStringInput
  email: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  owner: ModelStringInput
}

input CreateUserInput {
  id: ID
  username: String
  email: String
}

input UpdateUserInput {
  id: ID!
  username: String
  email: String
}

input DeleteUserInput {
  id: ID!
}

type Mutation {
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User
  createUserFavorite(input: CreateUserFavoriteInput!, condition: ModelUserFavoriteConditionInput): UserFavorite
  updateUserFavorite(input: UpdateUserFavoriteInput!, condition: ModelUserFavoriteConditionInput): UserFavorite
  deleteUserFavorite(input: DeleteUserFavoriteInput!, condition: ModelUserFavoriteConditionInput): UserFavorite
  createIngredient(input: CreateIngredientInput!, condition: ModelIngredientConditionInput): Ingredient
  updateIngredient(input: UpdateIngredientInput!, condition: ModelIngredientConditionInput): Ingredient
  deleteIngredient(input: DeleteIngredientInput!, condition: ModelIngredientConditionInput): Ingredient
  createDrink(input: CreateDrinkInput!, condition: ModelDrinkConditionInput): Drink
  updateDrink(input: UpdateDrinkInput!, condition: ModelDrinkConditionInput): Drink
  deleteDrink(input: DeleteDrinkInput!, condition: ModelDrinkConditionInput): Drink
  createDrinkIngredient(input: CreateDrinkIngredientInput!, condition: ModelDrinkIngredientConditionInput): DrinkIngredient
  updateDrinkIngredient(input: UpdateDrinkIngredientInput!, condition: ModelDrinkIngredientConditionInput): DrinkIngredient
  deleteDrinkIngredient(input: DeleteDrinkIngredientInput!, condition: ModelDrinkIngredientConditionInput): DrinkIngredient
}

input ModelSubscriptionUserFilterInput {
  id: ModelSubscriptionIDInput
  username: ModelSubscriptionStringInput
  email: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionUserFilterInput]
  or: [ModelSubscriptionUserFilterInput]
  owner: ModelStringInput
}

type Subscription {
  onCreateUser(filter: ModelSubscriptionUserFilterInput, owner: String): User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser(filter: ModelSubscriptionUserFilterInput, owner: String): User @aws_subscribe(mutations: ["updateUser"])
  onDeleteUser(filter: ModelSubscriptionUserFilterInput, owner: String): User @aws_subscribe(mutations: ["deleteUser"])
  onCreateUserFavorite(filter: ModelSubscriptionUserFavoriteFilterInput, owner: String): UserFavorite @aws_subscribe(mutations: ["createUserFavorite"])
  onUpdateUserFavorite(filter: ModelSubscriptionUserFavoriteFilterInput, owner: String): UserFavorite @aws_subscribe(mutations: ["updateUserFavorite"])
  onDeleteUserFavorite(filter: ModelSubscriptionUserFavoriteFilterInput, owner: String): UserFavorite @aws_subscribe(mutations: ["deleteUserFavorite"])
  onCreateIngredient(filter: ModelSubscriptionIngredientFilterInput, owner: String): Ingredient @aws_subscribe(mutations: ["createIngredient"]) @aws_api_key @aws_cognito_user_pools
  onUpdateIngredient(filter: ModelSubscriptionIngredientFilterInput, owner: String): Ingredient @aws_subscribe(mutations: ["updateIngredient"]) @aws_api_key @aws_cognito_user_pools
  onDeleteIngredient(filter: ModelSubscriptionIngredientFilterInput, owner: String): Ingredient @aws_subscribe(mutations: ["deleteIngredient"]) @aws_api_key @aws_cognito_user_pools
  onCreateDrink(filter: ModelSubscriptionDrinkFilterInput, owner: String): Drink @aws_subscribe(mutations: ["createDrink"]) @aws_api_key @aws_cognito_user_pools
  onUpdateDrink(filter: ModelSubscriptionDrinkFilterInput, owner: String): Drink @aws_subscribe(mutations: ["updateDrink"]) @aws_api_key @aws_cognito_user_pools
  onDeleteDrink(filter: ModelSubscriptionDrinkFilterInput, owner: String): Drink @aws_subscribe(mutations: ["deleteDrink"]) @aws_api_key @aws_cognito_user_pools
  onCreateDrinkIngredient(filter: ModelSubscriptionDrinkIngredientFilterInput, owner: String): DrinkIngredient @aws_subscribe(mutations: ["createDrinkIngredient"]) @aws_api_key @aws_cognito_user_pools
  onUpdateDrinkIngredient(filter: ModelSubscriptionDrinkIngredientFilterInput, owner: String): DrinkIngredient @aws_subscribe(mutations: ["updateDrinkIngredient"]) @aws_api_key @aws_cognito_user_pools
  onDeleteDrinkIngredient(filter: ModelSubscriptionDrinkIngredientFilterInput, owner: String): DrinkIngredient @aws_subscribe(mutations: ["deleteDrinkIngredient"]) @aws_api_key @aws_cognito_user_pools
}

type ModelUserFavoriteConnection @aws_api_key @aws_cognito_user_pools {
  items: [UserFavorite]!
  nextToken: String
}

input ModelUserFavoriteFilterInput {
  id: ModelIDInput
  userID: ModelIDInput
  drinkID: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelUserFavoriteFilterInput]
  or: [ModelUserFavoriteFilterInput]
  not: ModelUserFavoriteFilterInput
  owner: ModelStringInput
}

input ModelUserFavoriteConditionInput {
  userID: ModelIDInput
  drinkID: ModelIDInput
  and: [ModelUserFavoriteConditionInput]
  or: [ModelUserFavoriteConditionInput]
  not: ModelUserFavoriteConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  owner: ModelStringInput
}

input CreateUserFavoriteInput {
  id: ID
  userID: ID!
  drinkID: ID!
}

input UpdateUserFavoriteInput {
  id: ID!
  userID: ID
  drinkID: ID
}

input DeleteUserFavoriteInput {
  id: ID!
}

input ModelSubscriptionUserFavoriteFilterInput {
  id: ModelSubscriptionIDInput
  userID: ModelSubscriptionIDInput
  drinkID: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionUserFavoriteFilterInput]
  or: [ModelSubscriptionUserFavoriteFilterInput]
  owner: ModelStringInput
}

type ModelIngredientConnection @aws_api_key @aws_cognito_user_pools {
  items: [Ingredient]!
  nextToken: String
}

input ModelIngredientFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelIngredientFilterInput]
  or: [ModelIngredientFilterInput]
  not: ModelIngredientFilterInput
  owner: ModelStringInput
}

input ModelIngredientConditionInput {
  name: ModelStringInput
  and: [ModelIngredientConditionInput]
  or: [ModelIngredientConditionInput]
  not: ModelIngredientConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  owner: ModelStringInput
}

input CreateIngredientInput {
  id: ID
  name: String!
}

input UpdateIngredientInput {
  id: ID!
  name: String
}

input DeleteIngredientInput {
  id: ID!
}

input ModelSubscriptionIngredientFilterInput {
  id: ModelSubscriptionIDInput
  name: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionIngredientFilterInput]
  or: [ModelSubscriptionIngredientFilterInput]
  owner: ModelStringInput
}

type ModelDrinkConnection @aws_api_key @aws_cognito_user_pools {
  items: [Drink]!
  nextToken: String
}

input ModelDrinkFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  category: ModelStringInput
  description: ModelStringInput
  garnish: ModelStringInput
  image: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelDrinkFilterInput]
  or: [ModelDrinkFilterInput]
  not: ModelDrinkFilterInput
  owner: ModelStringInput
}

input ModelDrinkConditionInput {
  name: ModelStringInput
  category: ModelStringInput
  description: ModelStringInput
  garnish: ModelStringInput
  image: ModelStringInput
  and: [ModelDrinkConditionInput]
  or: [ModelDrinkConditionInput]
  not: ModelDrinkConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  owner: ModelStringInput
}

input CreateDrinkInput {
  id: ID
  name: String!
  category: String
  description: String
  garnish: String
  image: String
}

input UpdateDrinkInput {
  id: ID!
  name: String
  category: String
  description: String
  garnish: String
  image: String
}

input DeleteDrinkInput {
  id: ID!
}

input ModelSubscriptionDrinkFilterInput {
  id: ModelSubscriptionIDInput
  name: ModelSubscriptionStringInput
  category: ModelSubscriptionStringInput
  description: ModelSubscriptionStringInput
  garnish: ModelSubscriptionStringInput
  image: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionDrinkFilterInput]
  or: [ModelSubscriptionDrinkFilterInput]
  owner: ModelStringInput
}

type ModelDrinkIngredientConnection @aws_api_key @aws_cognito_user_pools {
  items: [DrinkIngredient]!
  nextToken: String
}

input ModelDrinkIngredientFilterInput {
  id: ModelIDInput
  amount: ModelFloatInput
  unit: ModelStringInput
  drinkID: ModelIDInput
  ingredientID: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelDrinkIngredientFilterInput]
  or: [ModelDrinkIngredientFilterInput]
  not: ModelDrinkIngredientFilterInput
  owner: ModelStringInput
}

input ModelDrinkIngredientConditionInput {
  amount: ModelFloatInput
  unit: ModelStringInput
  drinkID: ModelIDInput
  ingredientID: ModelIDInput
  and: [ModelDrinkIngredientConditionInput]
  or: [ModelDrinkIngredientConditionInput]
  not: ModelDrinkIngredientConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  owner: ModelStringInput
}

input CreateDrinkIngredientInput {
  id: ID
  amount: Float
  unit: String
  drinkID: ID!
  ingredientID: ID!
}

input UpdateDrinkIngredientInput {
  id: ID!
  amount: Float
  unit: String
  drinkID: ID
  ingredientID: ID
}

input DeleteDrinkIngredientInput {
  id: ID!
}

input ModelSubscriptionDrinkIngredientFilterInput {
  id: ModelSubscriptionIDInput
  amount: ModelSubscriptionFloatInput
  unit: ModelSubscriptionStringInput
  drinkID: ModelSubscriptionIDInput
  ingredientID: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionDrinkIngredientFilterInput]
  or: [ModelSubscriptionDrinkIngredientFilterInput]
  owner: ModelStringInput
}
