type Event
  @model
  @auth(rules: [
    { allow: owner },                                # host
    {                                                # guests → read-only via the relationship
      allow: owner,
      ownerField: "guestOwners",
      operations: [read]
    }
  ]) {
  id: ID!
  name: String!
  description: String
  location: String
  startTime: AWSDateTime!
  endTime: AWSDateTime!
  liquorbotId: Int!
  inviteCode: String!        @index(name: "byCode", queryField: "eventsByCode")
  drinkIDs: [Int!]

  # NEW – reverse connection so AppSync can evaluate the second auth rule
  guestOwners: [String]      # filled automatically; don’t touch in code
  guests: [GuestEvent]       @hasMany(indexName: "byEvent", fields:["id"])
}

type GuestEvent
  @model
  @auth(rules:[{ allow: owner }]) {
  id: ID!           @primaryKey
  eventID: ID!      @index(name:"byEvent", queryField:"guestEventsByEvent")
  # NEW – tell Amplify which event this belongs to
  event: Event      @belongsTo(fields:["eventID"])
}


type PouredDrink @model @auth(rules: [{allow: public}, {allow: owner}]) {
  id: ID!
  userID: ID!
  drinkID: Int!
  drinkName: String
  volume: Float
  timestamp: AWSDateTime!
}

type LikedDrink @model @auth(rules: [{allow: public}, {allow: owner}]) {
  id: ID!
  userID: ID
  drinkID: Int
  createdAt: AWSDateTime
}

type RecipeIngredient {
  ingredientID: ID
  amount: Float
  priority: Int
}

type CustomRecipe @model @auth(rules: [{allow: public}, {allow: owner}]) {
  id: ID!
  name: String!
  description: String
  ingredients: [RecipeIngredient!]
  createdAt: AWSDateTime
  image: String
}

type UserProfile @model @auth(rules: [{allow: public}, {allow: owner}]) {
  id: ID!
  username: String
  bio: String
  role: String
  profilePicture: String
}
 